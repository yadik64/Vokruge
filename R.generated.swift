//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Route.gpx`.
    static let routeGpx = Rswift.FileResource(bundle: R.hostingBundle, name: "Route", pathExtension: "gpx")
    
    /// `bundle.url(forResource: "Route", withExtension: "gpx")`
    static func routeGpx(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.routeGpx
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProText-BlackItalic`.
    static let sfProTextBlackItalic = Rswift.FontResource(fontName: "SFProText-BlackItalic")
    /// Font `SFProText-Black`.
    static let sfProTextBlack = Rswift.FontResource(fontName: "SFProText-Black")
    /// Font `SFProText-BoldItalic`.
    static let sfProTextBoldItalic = Rswift.FontResource(fontName: "SFProText-BoldItalic")
    /// Font `SFProText-Bold`.
    static let sfProTextBold = Rswift.FontResource(fontName: "SFProText-Bold")
    /// Font `SFProText-HeavyItalic`.
    static let sfProTextHeavyItalic = Rswift.FontResource(fontName: "SFProText-HeavyItalic")
    /// Font `SFProText-Heavy`.
    static let sfProTextHeavy = Rswift.FontResource(fontName: "SFProText-Heavy")
    /// Font `SFProText-LightItalic`.
    static let sfProTextLightItalic = Rswift.FontResource(fontName: "SFProText-LightItalic")
    /// Font `SFProText-Light`.
    static let sfProTextLight = Rswift.FontResource(fontName: "SFProText-Light")
    /// Font `SFProText-MediumItalic`.
    static let sfProTextMediumItalic = Rswift.FontResource(fontName: "SFProText-MediumItalic")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-RegularItalic`.
    static let sfProTextRegularItalic = Rswift.FontResource(fontName: "SFProText-RegularItalic")
    /// Font `SFProText-Regular`.
    static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
    /// Font `SFProText-SemiboldItalic`.
    static let sfProTextSemiboldItalic = Rswift.FontResource(fontName: "SFProText-SemiboldItalic")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
    /// Font `SFProText-ThinItalic`.
    static let sfProTextThinItalic = Rswift.FontResource(fontName: "SFProText-ThinItalic")
    /// Font `SFProText-Thin`.
    static let sfProTextThin = Rswift.FontResource(fontName: "SFProText-Thin")
    /// Font `SFProText-UltralightItalic`.
    static let sfProTextUltralightItalic = Rswift.FontResource(fontName: "SFProText-UltralightItalic")
    /// Font `SFProText-Ultralight`.
    static let sfProTextUltralight = Rswift.FontResource(fontName: "SFProText-Ultralight")
    
    /// `UIFont(name: "SFProText-Black", size: ...)`
    static func sfProTextBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBlack, size: size)
    }
    
    /// `UIFont(name: "SFProText-BlackItalic", size: ...)`
    static func sfProTextBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBlackItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Bold", size: ...)`
    static func sfProTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBold, size: size)
    }
    
    /// `UIFont(name: "SFProText-BoldItalic", size: ...)`
    static func sfProTextBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Heavy", size: ...)`
    static func sfProTextHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextHeavy, size: size)
    }
    
    /// `UIFont(name: "SFProText-HeavyItalic", size: ...)`
    static func sfProTextHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Light", size: ...)`
    static func sfProTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLight, size: size)
    }
    
    /// `UIFont(name: "SFProText-LightItalic", size: ...)`
    static func sfProTextLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLightItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }
    
    /// `UIFont(name: "SFProText-MediumItalic", size: ...)`
    static func sfProTextMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMediumItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Regular", size: ...)`
    static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegular, size: size)
    }
    
    /// `UIFont(name: "SFProText-RegularItalic", size: ...)`
    static func sfProTextRegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegularItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }
    
    /// `UIFont(name: "SFProText-SemiboldItalic", size: ...)`
    static func sfProTextSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemiboldItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Thin", size: ...)`
    static func sfProTextThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextThin, size: size)
    }
    
    /// `UIFont(name: "SFProText-ThinItalic", size: ...)`
    static func sfProTextThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextThinItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Ultralight", size: ...)`
    static func sfProTextUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextUltralight, size: size)
    }
    
    /// `UIFont(name: "SFProText-UltralightItalic", size: ...)`
    static func sfProTextUltralightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextUltralightItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.sfProTextBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Black' could not be loaded, is 'SF-Pro-Text-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-BlackItalic' could not be loaded, is 'SF-Pro-Text-BlackItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Bold' could not be loaded, is 'SF-Pro-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-BoldItalic' could not be loaded, is 'SF-Pro-Text-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Heavy' could not be loaded, is 'SF-Pro-Text-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-HeavyItalic' could not be loaded, is 'SF-Pro-Text-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Light' could not be loaded, is 'SF-Pro-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-LightItalic' could not be loaded, is 'SF-Pro-Text-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-MediumItalic' could not be loaded, is 'SF-Pro-Text-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'SF-Pro-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-RegularItalic' could not be loaded, is 'SF-Pro-Text-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SF-Pro-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-SemiboldItalic' could not be loaded, is 'SF-Pro-Text-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Thin' could not be loaded, is 'SF-Pro-Text-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-ThinItalic' could not be loaded, is 'SF-Pro-Text-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Ultralight' could not be loaded, is 'SF-Pro-Text-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextUltralightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-UltralightItalic' could not be loaded, is 'SF-Pro-Text-UltralightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `all`.
    static let all = Rswift.ImageResource(bundle: R.hostingBundle, name: "all")
    /// Image `backButton`.
    static let backButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "backButton")
    /// Image `chevronRight`.
    static let chevronRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevronRight")
    /// Image `emblema`.
    static let emblema = Rswift.ImageResource(bundle: R.hostingBundle, name: "emblema")
    /// Image `emptyHistory`.
    static let emptyHistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyHistory")
    /// Image `food`.
    static let food = Rswift.ImageResource(bundle: R.hostingBundle, name: "food")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `leisure`.
    static let leisure = Rswift.ImageResource(bundle: R.hostingBundle, name: "leisure")
    /// Image `purchases`.
    static let purchases = Rswift.ImageResource(bundle: R.hostingBundle, name: "purchases")
    /// Image `searchBarBack`.
    static let searchBarBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchBarBack")
    /// Image `searchBarSearch`.
    static let searchBarSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchBarSearch")
    /// Image `tabCategories`.
    static let tabCategories = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabCategories")
    /// Image `tabEvents`.
    static let tabEvents = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabEvents")
    /// Image `tabMap`.
    static let tabMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabMap")
    /// Image `tabMore`.
    static let tabMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabMore")
    /// Image `tabProfile`.
    static let tabProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabProfile")
    /// Image `tabPromotion`.
    static let tabPromotion = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabPromotion")
    /// Image `testPhotoCompany`.
    static let testPhotoCompany = Rswift.ImageResource(bundle: R.hostingBundle, name: "testPhotoCompany")
    /// Image `vokruge`.
    static let vokruge = Rswift.ImageResource(bundle: R.hostingBundle, name: "vokruge")
    
    /// `UIImage(named: "all", bundle: ..., traitCollection: ...)`
    static func all(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.all, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backButton", bundle: ..., traitCollection: ...)`
    static func backButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chevronRight", bundle: ..., traitCollection: ...)`
    static func chevronRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emblema", bundle: ..., traitCollection: ...)`
    static func emblema(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emblema, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emptyHistory", bundle: ..., traitCollection: ...)`
    static func emptyHistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyHistory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "food", bundle: ..., traitCollection: ...)`
    static func food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "leisure", bundle: ..., traitCollection: ...)`
    static func leisure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leisure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "purchases", bundle: ..., traitCollection: ...)`
    static func purchases(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purchases, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "searchBarBack", bundle: ..., traitCollection: ...)`
    static func searchBarBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchBarBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "searchBarSearch", bundle: ..., traitCollection: ...)`
    static func searchBarSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchBarSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabCategories", bundle: ..., traitCollection: ...)`
    static func tabCategories(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabCategories, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabEvents", bundle: ..., traitCollection: ...)`
    static func tabEvents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabEvents, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabMap", bundle: ..., traitCollection: ...)`
    static func tabMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabMap, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabMore", bundle: ..., traitCollection: ...)`
    static func tabMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabMore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabProfile", bundle: ..., traitCollection: ...)`
    static func tabProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabProfile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabPromotion", bundle: ..., traitCollection: ...)`
    static func tabPromotion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabPromotion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "testPhotoCompany", bundle: ..., traitCollection: ...)`
    static func testPhotoCompany(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.testPhotoCompany, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vokruge", bundle: ..., traitCollection: ...)`
    static func vokruge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vokruge, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `CategoriesCell`.
    static let categoriesCell = _R.nib._CategoriesCell()
    /// Nib `EmptyViewController`.
    static let emptyViewController = _R.nib._EmptyViewController()
    /// Nib `SearchButtonView`.
    static let searchButtonView = _R.nib._SearchButtonView()
    /// Nib `SearchHistoryCell`.
    static let searchHistoryCell = _R.nib._SearchHistoryCell()
    /// Nib `SearchHistoryView`.
    static let searchHistoryView = _R.nib._SearchHistoryView()
    /// Nib `SearchResultCompanyCell`.
    static let searchResultCompanyCell = _R.nib._SearchResultCompanyCell()
    /// Nib `SubcategoriesCell`.
    static let subcategoriesCell = _R.nib._SubcategoriesCell()
    
    /// `UINib(name: "CategoriesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoriesCell) instead")
    static func categoriesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoriesCell)
    }
    
    /// `UINib(name: "EmptyViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyViewController) instead")
    static func emptyViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyViewController)
    }
    
    /// `UINib(name: "SearchButtonView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchButtonView) instead")
    static func searchButtonView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchButtonView)
    }
    
    /// `UINib(name: "SearchHistoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHistoryCell) instead")
    static func searchHistoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHistoryCell)
    }
    
    /// `UINib(name: "SearchHistoryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHistoryView) instead")
    static func searchHistoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHistoryView)
    }
    
    /// `UINib(name: "SearchResultCompanyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchResultCompanyCell) instead")
    static func searchResultCompanyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultCompanyCell)
    }
    
    /// `UINib(name: "SubcategoriesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subcategoriesCell) instead")
    static func subcategoriesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subcategoriesCell)
    }
    
    static func categoriesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoriesCell? {
      return R.nib.categoriesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoriesCell
    }
    
    static func emptyViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func searchButtonView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchButtonView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func searchHistoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHistoryCell? {
      return R.nib.searchHistoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHistoryCell
    }
    
    static func searchHistoryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchHistoryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func searchResultCompanyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultCompanyCell? {
      return R.nib.searchResultCompanyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultCompanyCell
    }
    
    static func subcategoriesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubcategoriesCell? {
      return R.nib.subcategoriesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubcategoriesCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CategoriesCell`.
    static let categoriesCell: Rswift.ReuseIdentifier<CategoriesCell> = Rswift.ReuseIdentifier(identifier: "CategoriesCell")
    /// Reuse identifier `SearchHistoryCell`.
    static let searchHistoryCell: Rswift.ReuseIdentifier<SearchHistoryCell> = Rswift.ReuseIdentifier(identifier: "SearchHistoryCell")
    /// Reuse identifier `SearchResultCompanyCell`.
    static let searchResultCompanyCell: Rswift.ReuseIdentifier<SearchResultCompanyCell> = Rswift.ReuseIdentifier(identifier: "SearchResultCompanyCell")
    /// Reuse identifier `SubcategoriesCell`.
    static let subcategoriesCell: Rswift.ReuseIdentifier<SubcategoriesCell> = Rswift.ReuseIdentifier(identifier: "SubcategoriesCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    /// Storyboard `AllCategoriesViewController`.
    static let allCategoriesViewController = _R.storyboard.allCategoriesViewController()
    /// Storyboard `CompanyDetailsViewController`.
    static let companyDetailsViewController = _R.storyboard.companyDetailsViewController()
    /// Storyboard `CompanyInfoViewController`.
    static let companyInfoViewController = _R.storyboard.companyInfoViewController()
    /// Storyboard `CompanyMoreViewController`.
    static let companyMoreViewController = _R.storyboard.companyMoreViewController()
    /// Storyboard `CompanyReviewsViewController`.
    static let companyReviewsViewController = _R.storyboard.companyReviewsViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainViewController`.
    static let mainViewController = _R.storyboard.mainViewController()
    /// Storyboard `SearchHistoryViewController`.
    static let searchHistoryViewController = _R.storyboard.searchHistoryViewController()
    /// Storyboard `SearchResultListViewController`.
    static let searchResultListViewController = _R.storyboard.searchResultListViewController()
    /// Storyboard `SearchResultViewController`.
    static let searchResultViewController = _R.storyboard.searchResultViewController()
    /// Storyboard `SubcategoriesListViewController`.
    static let subcategoriesListViewController = _R.storyboard.subcategoriesListViewController()
    
    /// `UIStoryboard(name: "AllCategoriesViewController", bundle: ...)`
    static func allCategoriesViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.allCategoriesViewController)
    }
    
    /// `UIStoryboard(name: "CompanyDetailsViewController", bundle: ...)`
    static func companyDetailsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.companyDetailsViewController)
    }
    
    /// `UIStoryboard(name: "CompanyInfoViewController", bundle: ...)`
    static func companyInfoViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.companyInfoViewController)
    }
    
    /// `UIStoryboard(name: "CompanyMoreViewController", bundle: ...)`
    static func companyMoreViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.companyMoreViewController)
    }
    
    /// `UIStoryboard(name: "CompanyReviewsViewController", bundle: ...)`
    static func companyReviewsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.companyReviewsViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainViewController", bundle: ...)`
    static func mainViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainViewController)
    }
    
    /// `UIStoryboard(name: "SearchHistoryViewController", bundle: ...)`
    static func searchHistoryViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchHistoryViewController)
    }
    
    /// `UIStoryboard(name: "SearchResultListViewController", bundle: ...)`
    static func searchResultListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchResultListViewController)
    }
    
    /// `UIStoryboard(name: "SearchResultViewController", bundle: ...)`
    static func searchResultViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchResultViewController)
    }
    
    /// `UIStoryboard(name: "SubcategoriesListViewController", bundle: ...)`
    static func subcategoriesListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.subcategoriesListViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 12 localization keys.
    struct localizable {
      /// Base translation: Акции
      /// 
      /// Locales: ru, Base
      static let tabBarItemPromotion = Rswift.StringResource(key: "tabBarItem.promotion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Ваша история поисков пока чиста. Напишите свой первый запрос, а мы его запомним.
      /// 
      /// Locales: ru, Base
      static let mainScreenSearchHistoryEmpty = Rswift.StringResource(key: "mainScreen.search.historyEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: ИНФОРМАЦИЯ
      /// 
      /// Locales: ru, Base
      static let companyDetailsPageTabInfo = Rswift.StringResource(key: "companyDetails.pageTab.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Карта
      /// 
      /// Locales: ru, Base
      static let tabBarItemMap = Rswift.StringResource(key: "tabBarItem.map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Категории
      /// 
      /// Locales: ru, Base
      static let categoriesTitle = Rswift.StringResource(key: "categories.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Категории
      /// 
      /// Locales: ru, Base
      static let tabBarItemCategories = Rswift.StringResource(key: "tabBarItem.categories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Мероприятия
      /// 
      /// Locales: ru, Base
      static let tabBarItemEvents = Rswift.StringResource(key: "tabBarItem.events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: ОТЗЫВЫ
      /// 
      /// Locales: ru, Base
      static let companyDetailsPageTabReviews = Rswift.StringResource(key: "companyDetails.pageTab.reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Очистить историю
      /// 
      /// Locales: ru, Base
      static let mainScreenSearchClearButton = Rswift.StringResource(key: "mainScreen.search.clearButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: ПОДРОБНЕЕ
      /// 
      /// Locales: ru, Base
      static let companyDetailsPageTabMore = Rswift.StringResource(key: "companyDetails.pageTab.more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Поиск...
      /// 
      /// Locales: ru, Base
      static let searchBarPlaceholder = Rswift.StringResource(key: "searchBar.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Прочее
      /// 
      /// Locales: ru, Base
      static let tabBarItemOther = Rswift.StringResource(key: "tabBarItem.other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      
      /// Base translation: Акции
      /// 
      /// Locales: ru, Base
      static func tabBarItemPromotion(_: Void = ()) -> String {
        return NSLocalizedString("tabBarItem.promotion", bundle: R.hostingBundle, value: "Акции", comment: "")
      }
      
      /// Base translation: Ваша история поисков пока чиста. Напишите свой первый запрос, а мы его запомним.
      /// 
      /// Locales: ru, Base
      static func mainScreenSearchHistoryEmpty(_: Void = ()) -> String {
        return NSLocalizedString("mainScreen.search.historyEmpty", bundle: R.hostingBundle, value: "Ваша история поисков пока чиста. Напишите свой первый запрос, а мы его запомним.", comment: "")
      }
      
      /// Base translation: ИНФОРМАЦИЯ
      /// 
      /// Locales: ru, Base
      static func companyDetailsPageTabInfo(_: Void = ()) -> String {
        return NSLocalizedString("companyDetails.pageTab.info", bundle: R.hostingBundle, value: "ИНФОРМАЦИЯ", comment: "")
      }
      
      /// Base translation: Карта
      /// 
      /// Locales: ru, Base
      static func tabBarItemMap(_: Void = ()) -> String {
        return NSLocalizedString("tabBarItem.map", bundle: R.hostingBundle, value: "Карта", comment: "")
      }
      
      /// Base translation: Категории
      /// 
      /// Locales: ru, Base
      static func categoriesTitle(_: Void = ()) -> String {
        return NSLocalizedString("categories.title", bundle: R.hostingBundle, value: "Категории", comment: "")
      }
      
      /// Base translation: Категории
      /// 
      /// Locales: ru, Base
      static func tabBarItemCategories(_: Void = ()) -> String {
        return NSLocalizedString("tabBarItem.categories", bundle: R.hostingBundle, value: "Категории", comment: "")
      }
      
      /// Base translation: Мероприятия
      /// 
      /// Locales: ru, Base
      static func tabBarItemEvents(_: Void = ()) -> String {
        return NSLocalizedString("tabBarItem.events", bundle: R.hostingBundle, value: "Мероприятия", comment: "")
      }
      
      /// Base translation: ОТЗЫВЫ
      /// 
      /// Locales: ru, Base
      static func companyDetailsPageTabReviews(_: Void = ()) -> String {
        return NSLocalizedString("companyDetails.pageTab.reviews", bundle: R.hostingBundle, value: "ОТЗЫВЫ", comment: "")
      }
      
      /// Base translation: Очистить историю
      /// 
      /// Locales: ru, Base
      static func mainScreenSearchClearButton(_: Void = ()) -> String {
        return NSLocalizedString("mainScreen.search.clearButton", bundle: R.hostingBundle, value: "Очистить историю", comment: "")
      }
      
      /// Base translation: ПОДРОБНЕЕ
      /// 
      /// Locales: ru, Base
      static func companyDetailsPageTabMore(_: Void = ()) -> String {
        return NSLocalizedString("companyDetails.pageTab.more", bundle: R.hostingBundle, value: "ПОДРОБНЕЕ", comment: "")
      }
      
      /// Base translation: Поиск...
      /// 
      /// Locales: ru, Base
      static func searchBarPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("searchBar.placeholder", bundle: R.hostingBundle, value: "Поиск...", comment: "")
      }
      
      /// Base translation: Прочее
      /// 
      /// Locales: ru, Base
      static func tabBarItemOther(_: Void = ()) -> String {
        return NSLocalizedString("tabBarItem.other", bundle: R.hostingBundle, value: "Прочее", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SearchButtonView.validate()
      try _SubcategoriesCell.validate()
    }
    
    struct _CategoriesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategoriesCell
      
      let bundle = R.hostingBundle
      let identifier = "CategoriesCell"
      let name = "CategoriesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoriesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoriesCell
      }
      
      fileprivate init() {}
    }
    
    struct _EmptyViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmptyViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchButtonView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchButtonView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "searchBarSearch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'searchBarSearch' is used in nib 'SearchButtonView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchHistoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchHistoryCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchHistoryCell"
      let name = "SearchHistoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHistoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHistoryCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchHistoryView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchHistoryView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchResultCompanyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchResultCompanyCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchResultCompanyCell"
      let name = "SearchResultCompanyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultCompanyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultCompanyCell
      }
      
      fileprivate init() {}
    }
    
    struct _SubcategoriesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SubcategoriesCell
      
      let bundle = R.hostingBundle
      let identifier = "SubcategoriesCell"
      let name = "SubcategoriesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubcategoriesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubcategoriesCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "chevronRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevronRight' is used in nib 'SubcategoriesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try allCategoriesViewController.validate()
      try companyDetailsViewController.validate()
      try companyInfoViewController.validate()
      try companyMoreViewController.validate()
      try companyReviewsViewController.validate()
      try launchScreen.validate()
      try mainViewController.validate()
      try searchHistoryViewController.validate()
      try searchResultListViewController.validate()
      try searchResultViewController.validate()
      try subcategoriesListViewController.validate()
    }
    
    struct allCategoriesViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AllCategoriesViewController
      
      let bundle = R.hostingBundle
      let name = "AllCategoriesViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct companyDetailsViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CompanyDetailsViewController
      
      let bundle = R.hostingBundle
      let name = "CompanyDetailsViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "testPhotoCompany", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'testPhotoCompany' is used in storyboard 'CompanyDetailsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct companyInfoViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CompanyInfoViewController
      
      let bundle = R.hostingBundle
      let name = "CompanyInfoViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct companyMoreViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CompanyMoreViewController
      
      let bundle = R.hostingBundle
      let name = "CompanyMoreViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct companyReviewsViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CompanyReviewsViewController
      
      let bundle = R.hostingBundle
      let name = "CompanyReviewsViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "emblema", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emblema' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "vokruge", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'vokruge' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct mainViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController
      
      let bundle = R.hostingBundle
      let name = "MainViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct searchHistoryViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchHistoryViewController
      
      let bundle = R.hostingBundle
      let name = "SearchHistoryViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "emptyHistory", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emptyHistory' is used in storyboard 'SearchHistoryViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct searchResultListViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchResultListViewController
      
      let bundle = R.hostingBundle
      let name = "SearchResultListViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct searchResultViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchResultViewController
      
      let bundle = R.hostingBundle
      let name = "SearchResultViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct subcategoriesListViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SubcategoriesListViewController
      
      let bundle = R.hostingBundle
      let name = "SubcategoriesListViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
